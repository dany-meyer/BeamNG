from beamngpy import BeamNGpy, Scenario, Vehicle, set_up_simple_loggingfrom beamngpy.tools import (OpenDriveImporter, OpenStreetMapImporter,SumoImporter)from beamngpy.sensors import AdvancedIMUimport timeimport threadingdoEnd = Falsedef function_break():    print("Type 1 to exit the program")    while True:        text = input().strip()        if text == "1":            print("Exit program")            global doEnd            doEnd = True            exit(1)        time.sleep(1)                def function_main():    set_up_simple_logging()    # Initialize BeamNG.    print("Initializing BeamNG...")    beamng = BeamNGpy('localhost', 64256, home='C:\BeamNG\BeamNG.tech.v0.29.1.0')    bng = beamng.open()        print("Load scenario...")    scenario = Scenario('smallgrid', 'roads_importer')    vehicle = Vehicle('ego_vehicle', model='etk800')    scenario.add_vehicle(vehicle, pos=(165.9785758491, -134.42740610118, 1.7778442776711003))    #[165.9785758491, -134.42740610118, 1.7778442776711003]    # Import OpenStreetMap (.osm).    filename = "C:\map.osm"    OpenStreetMapImporter.import_osm(filename, scenario)            # Start up BeamNG with the imported road network.    print("Making scenario...")    scenario.make(bng)    #bng.settings.set_deterministic(60) # Set simulator to 60hz temporal resolution    bng.scenario.load(scenario)    bng.scenario.start()    IMU = AdvancedIMU('accel1', bng, vehicle, gfx_update_time=0.01)    # Execute BeamNG until the user closes it.    print("Completed.")        vehicle.ai.set_mode('span')    while(True):        data = IMU.poll() # Fetch the latest readings from the sensor.        if len(data)>0:                print("Position:", data[0]['pos'])            #print("Position:", data[0])        if doEnd:            IMU.remove()            bng.close()            time.sleep(2)            exit(1)        time.sleep(2)    #Start the Threadsthread_break = threading.Thread(target=function_break)thread_main = threading.Thread(target=function_main)thread_break.start()thread_main.start()